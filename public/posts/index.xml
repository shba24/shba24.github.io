<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Shubham Bansal Technical Blog</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Posts on Shubham Bansal Technical Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 02 Sep 2024 03:59:44 -0700</lastBuildDate>
    <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Distributed Table Format Series - Apache Iceberg - Part 1</title>
      <link>http://localhost:1313/posts/iceberg-table-format-part1/</link>
      <pubDate>Mon, 02 Sep 2024 03:59:44 -0700</pubDate>
      <guid>http://localhost:1313/posts/iceberg-table-format-part1/</guid>
      <description>Introduction So, after a couple of years of debating whether to jump into the icy waters of Apache Iceberg Table format, I finally mustered up the courage (and the free time, thanks to a long weekend) to dive into understanding it. Spoiler alert: I didn’t freeze—well, maybe just a little, but it was worth it.&#xA;In this post, I’m going to tackle some burning questions that have been floating around my head</description>
    </item>
    <item>
      <title>Distributed Cache Series - Part I - Redis</title>
      <link>http://localhost:1313/posts/distributed-cache-series-part-1-redis/</link>
      <pubDate>Fri, 09 Aug 2024 19:36:09 -0700</pubDate>
      <guid>http://localhost:1313/posts/distributed-cache-series-part-1-redis/</guid>
      <description>Introduction For the last couple of weeks, I have been discussing with my colleagues about&#xA;How can we improve the performance of some of our data access?&#xA;I will give you some background about the system so that we know our base tenets throughout this blog.&#xA;Let’s say the system stores the structured data in a database (Amazon DynamoDB) and unstructured data blob in some blobstore (Amazon S3). And, we want to improve the data access latency for both data stores as they provide sub-10ms latency for GET operations.</description>
    </item>
  </channel>
</rss>
