<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Distributed Cache on Shubham Bansal Technical Blog</title>
    <link>http://localhost:1313/series/distributed-cache/</link>
    <description>Recent content in Distributed Cache on Shubham Bansal Technical Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 15 Sep 2024 09:36:09 -0700</lastBuildDate>
    <atom:link href="http://localhost:1313/series/distributed-cache/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Distributed Cache Series - Part II - MemoryDB</title>
      <link>http://localhost:1313/posts/distributed-cache-series-part-2-memorydb/</link>
      <pubDate>Sun, 15 Sep 2024 09:36:09 -0700</pubDate>
      <guid>http://localhost:1313/posts/distributed-cache-series-part-2-memorydb/</guid>
      <description>Introduction Previously, in Part 1 of my Distributed Cache Series, I discussed Redis Cache, how it works, its benefits, limitations, and various trade-offs we need to think about before using Redis in production. In this part of the series, we will discuss Amazon MemoryDB and what makes it different from Redis. We will also examine what problem it solves over Redis and how it solves them. Again, we will discuss its benefits, limitations, and various trade-offs it provides.</description>
    </item>
    <item>
      <title>Distributed Cache Series - Part I - Redis</title>
      <link>http://localhost:1313/posts/distributed-cache-series-part-1-redis/</link>
      <pubDate>Fri, 09 Aug 2024 19:36:09 -0700</pubDate>
      <guid>http://localhost:1313/posts/distributed-cache-series-part-1-redis/</guid>
      <description>Introduction For the last couple of weeks, I have been discussing with my colleagues about&#xA;How can we improve the performance of some of our data access?&#xA;I will give you some background about the system so that we know our base tenets throughout this blog.&#xA;Letâ€™s say the system stores the structured data in a database (Amazon DynamoDB) and unstructured data blob in some blobstore (Amazon S3). And, we want to improve the data access latency for both data stores as they provide sub-10ms latency for GET operations.</description>
    </item>
  </channel>
</rss>
